<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>target = noone;
x_velocity = 0;
y_velocity = 0;
x_velocity_max = 5;
y_velocity_max = 5; //I know I know I know, trig issues, but this will be good enough. 
target_x = 0;
target_y = 0;
view_zio_numeral = 16;
view_width_default = view_wview[0];
view_height_default = view_hview[0];
timer = 0;
target_stopchase_range = 32;
chase_acceleration = .05;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>timer++;
if (instance_exists(obj_player))
{
    target = obj_player;
}

if (instance_exists(target))
{
    target_x = target.x;
    target_y = target.y;
}

view_wview[0] = view_width_default + sin(timer*(pi/64))*view_zio_numeral;
view_hview[0] = view_height_default + sin(timer*(pi/64))*view_zio_numeral;

var view_offset_x = view_wview[0]/2;
var view_offset_y = view_hview[0]/2;
/*
var chase_dir = point_direction(view_xview[0] - view_offset_x,view_xview[0] - view_offset_y,target_x,target_y);

if (point_distance(view_xview[0]-view_offset_x,view_yview[0]-view_offset_y,target_x,target_y) &gt; target_stopchase_range)
{
    x_velocity += lengthdir_x(chase_acceleration,chase_dir);
    y_velocity += lengthdir_y(chase_acceleration,chase_dir);
}
else
{
    x_velocity -= lengthdir_x(chase_acceleration,chase_dir);
    y_velocity -= lengthdir_y(chase_acceleration,chase_dir);
}

x_velocity = clamp(x_velocity,-x_velocity_max,x_velocity_max);
y_velocity = clamp(y_velocity,-y_velocity_max,y_velocity_max);
*/

view_xview[0] = lerp(view_xview[0],target_x - view_offset_x,.9);
view_yview[0] = lerp(view_yview[0],target_y - view_offset_y,.9);
//going to go eat and think this out. :D
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
